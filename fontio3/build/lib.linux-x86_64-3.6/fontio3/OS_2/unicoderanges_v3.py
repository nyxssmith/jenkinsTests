#
# unicoderanges_v3.py
#
# Copyright Â© 2004-2013, 2015-2016 Monotype Imaging Inc. All Rights Reserved.
#

"""
Support for representations of Unicode coverage data for Version 3 OS/2 tables.
"""

# System imports
import itertools

# Other imports
from fontio3 import utilities
from fontio3.fontdata import maskmeta
from fontio3.OS_2 import unicoderanges_v2
from fontio3.utilities import span

# -----------------------------------------------------------------------------

#
# Private constants
#

f = span.Span.fromstringhex

# The following is (mostly) mechanically generated by _generateUnicodeRanges_v3.py
_rangeData = {
    0: (100, f('0x20-0x7E')),
    1: (None, f('0xA0-0xFF')),
    2: (None, f('0x100-0x17F')),
    3: (None, f('0x180-0x24F')),
    4: (None, f('0x250-0x2AF')),
    5: (None, f('0x2B0-0x2FF')),
    6: (None, f('0x300-0x36F')),
    7: (None, f('0x370-0x377, 0x37A-0x37F, 0x384-0x38A, 0x38C, 0x38E-0x3A1, 0x3A3-0x3FF')),
    9: (None, f('0x400-0x52F')),
   10: (None, f('0x531-0x556, 0x559-0x55F, 0x561-0x587, 0x589-0x58A, 0x58D-0x58F')),
   11: (None, f('0x591-0x5C7, 0x5D0-0x5EA, 0x5F0-0x5F4')),
   13: (None, f('0x600-0x61C, 0x61E-0x6FF')),
   15: (None, f('0x900-0x97F')),
   16: (None, f('0x980-0x983, 0x985-0x98C, 0x98F-0x990, 0x993-0x9A8, 0x9AA-0x9B0, 0x9B2, 0x9B6-0x9B9, 0x9BC-0x9C4, 0x9C7-0x9C8, 0x9CB-0x9CE, 0x9D7, 0x9DC-0x9DD, 0x9DF-0x9E3, 0x9E6-0x9FB')),
   17: (None, f('0xA01-0xA03, 0xA05-0xA0A, 0xA0F-0xA10, 0xA13-0xA28, 0xA2A-0xA30, 0xA32-0xA33, 0xA35-0xA36, 0xA38-0xA39, 0xA3C, 0xA3E-0xA42, 0xA47-0xA48, 0xA4B-0xA4D, 0xA51, 0xA59-0xA5C, 0xA5E, 0xA66-0xA75')),
   18: (None, f('0xA81-0xA83, 0xA85-0xA8D, 0xA8F-0xA91, 0xA93-0xAA8, 0xAAA-0xAB0, 0xAB2-0xAB3, 0xAB5-0xAB9, 0xABC-0xAC5, 0xAC7-0xAC9, 0xACB-0xACD, 0xAD0, 0xAE0-0xAE3, 0xAE6-0xAF1, 0xAF9')),
   19: (None, f('0xB01-0xB03, 0xB05-0xB0C, 0xB0F-0xB10, 0xB13-0xB28, 0xB2A-0xB30, 0xB32-0xB33, 0xB35-0xB39, 0xB3C-0xB44, 0xB47-0xB48, 0xB4B-0xB4D, 0xB56-0xB57, 0xB5C-0xB5D, 0xB5F-0xB63, 0xB66-0xB77')),
   20: (None, f('0xB82-0xB83, 0xB85-0xB8A, 0xB8E-0xB90, 0xB92-0xB95, 0xB99-0xB9A, 0xB9C, 0xB9E-0xB9F, 0xBA3-0xBA4, 0xBA8-0xBAA, 0xBAE-0xBB9, 0xBBE-0xBC2, 0xBC6-0xBC8, 0xBCA-0xBCD, 0xBD0, 0xBD7, 0xBE6-0xBFA')),
   21: (None, f('0xC00-0xC03, 0xC05-0xC0C, 0xC0E-0xC10, 0xC12-0xC28, 0xC2A-0xC39, 0xC3D-0xC44, 0xC46-0xC48, 0xC4A-0xC4D, 0xC55-0xC56, 0xC58-0xC5A, 0xC60-0xC63, 0xC66-0xC6F, 0xC78-0xC7F')),
   22: (None, f('0xC81-0xC83, 0xC85-0xC8C, 0xC8E-0xC90, 0xC92-0xCA8, 0xCAA-0xCB3, 0xCB5-0xCB9, 0xCBC-0xCC4, 0xCC6-0xCC8, 0xCCA-0xCCD, 0xCD5-0xCD6, 0xCDE, 0xCE0-0xCE3, 0xCE6-0xCEF, 0xCF1-0xCF2')),
   23: (None, f('0xD01-0xD03, 0xD05-0xD0C, 0xD0E-0xD10, 0xD12-0xD3A, 0xD3D-0xD44, 0xD46-0xD48, 0xD4A-0xD4E, 0xD57, 0xD5F-0xD63, 0xD66-0xD75, 0xD79-0xD7F')),
   24: (None, f('0xE01-0xE3A, 0xE3F-0xE5B')),
   25: (None, f('0xE81-0xE82, 0xE84, 0xE87-0xE88, 0xE8A, 0xE8D, 0xE94-0xE97, 0xE99-0xE9F, 0xEA1-0xEA3, 0xEA5, 0xEA7, 0xEAA-0xEAB, 0xEAD-0xEB9, 0xEBB-0xEBD, 0xEC0-0xEC4, 0xEC6, 0xEC8-0xECD, 0xED0-0xED9, 0xEDC-0xEDF')),
   26: (None, f('0x10A0-0x10C5, 0x10C7, 0x10CD, 0x10D0-0x10FF')),
   28: (None, f('0x1100-0x11FF')),
   29: (None, f('0x1E00-0x1EFF')),
   30: (None, f('0x1F00-0x1F15, 0x1F18-0x1F1D, 0x1F20-0x1F45, 0x1F48-0x1F4D, 0x1F50-0x1F57, 0x1F59, 0x1F5B, 0x1F5D, 0x1F5F-0x1F7D, 0x1F80-0x1FB4, 0x1FB6-0x1FC4, 0x1FC6-0x1FD3, 0x1FD6-0x1FDB, 0x1FDD-0x1FEF, 0x1FF2-0x1FF4, 0x1FF6-0x1FFE')),
   31: (None, f('0x2000-0x2064, 0x2066-0x206F')),
   32: (None, f('0x2070-0x2071, 0x2074-0x208E, 0x2090-0x209C')),
   33: (None, f('0x20A0-0x20BE')),
   34: (None, f('0x20D0-0x20F0')),
   35: (None, f('0x2100-0x214F')),
   36: (None, f('0x2150-0x218B')),
   37: (None, f('0x2190-0x21FF, 0x27F0-0x27FF, 0x2900-0x297F')),
   38: (None, f('0x2200-0x22FF, 0x27C0-0x27EF, 0x2980-0x2AFF')),
   39: (None, f('0x2300-0x23FA')),
   40: (None, f('0x2400-0x2426')),
   41: (None, f('0x2440-0x244A')),
   42: (None, f('0x2460-0x24FF')),
   43: (None, f('0x2500-0x257F')),
   44: (None, f('0x2580-0x259F')),
   45: (None, f('0x25A0-0x25FF')),
   46: (None, f('0x2600-0x26FF')),
   47: (None, f('0x2700-0x27BF')),
   48: (None, f('0x3000-0x303F')),
   49: (None, f('0x3041-0x3096, 0x3099-0x309F')),
   50: (None, f('0x30A0-0x30FF, 0x31F0-0x31FF')),
   51: (None, f('0x3105-0x312D, 0x31A0-0x31BA')),
   52: (None, f('0x3131-0x318E')),
   54: (None, f('0x3200-0x321E, 0x3220-0x32FE')),
   55: (None, f('0x3300-0x33FF')),
   56: (None, f('0xAC00-0xD7A3')),
   57: (None, f('0x10000-0x1000B, 0x1000D-0x10026, 0x10028-0x1003A, 0x1003C-0x1003D, 0x1003F-0x1004D, 0x10050-0x1005D, 0x10080-0x100FA, 0x10100-0x10102, 0x10107-0x10133, 0x10137-0x1018C, 0x10190-0x1019B, 0x101A0, 0x101D0-0x101FD, 0x10280-0x1029C, 0x102A0-0x102D0, 0x102E0-0x102FB, 0x10300-0x10323, 0x10330-0x1034A, 0x10350-0x1037A, 0x10380-0x1039D, 0x1039F-0x103C3, 0x103C8-0x103D5, 0x10400-0x1049D, 0x104A0-0x104A9, 0x10500-0x10527, 0x10530-0x10563, 0x1056F, 0x10600-0x10736, 0x10740-0x10755, 0x10760-0x10767, 0x10800-0x10805, 0x10808, 0x1080A-0x10835, 0x10837-0x10838, 0x1083C, 0x1083F-0x10855, 0x10857-0x1089E, 0x108A7-0x108AF, 0x108E0-0x108F2, 0x108F4-0x108F5, 0x108FB-0x1091B, 0x1091F-0x10939, 0x1093F, 0x10980-0x109B7, 0x109BC-0x109CF, 0x109D2-0x10A03, 0x10A05-0x10A06, 0x10A0C-0x10A13, 0x10A15-0x10A17, 0x10A19-0x10A33, 0x10A38-0x10A3A, 0x10A3F-0x10A47, 0x10A50-0x10A58, 0x10A60-0x10A9F, 0x10AC0-0x10AE6, 0x10AEB-0x10AF6, 0x10B00-0x10B35, 0x10B39-0x10B55, 0x10B58-0x10B72, 0x10B78-0x10B91, 0x10B99-0x10B9C, 0x10BA9-0x10BAF, 0x10C00-0x10C48, 0x10C80-0x10CB2, 0x10CC0-0x10CF2, 0x10CFA-0x10CFF, 0x10E60-0x10E7E, 0x11000-0x1104D, 0x11052-0x1106F, 0x1107F-0x110C1, 0x110D0-0x110E8, 0x110F0-0x110F9, 0x11100-0x11134, 0x11136-0x11143, 0x11150-0x11176, 0x11180-0x111CD, 0x111D0-0x111DF, 0x111E1-0x111F4, 0x11200-0x11211, 0x11213-0x1123D, 0x11280-0x11286, 0x11288, 0x1128A-0x1128D, 0x1128F-0x1129D, 0x1129F-0x112A9, 0x112B0-0x112EA, 0x112F0-0x112F9, 0x11300-0x11303, 0x11305-0x1130C, 0x1130F-0x11310, 0x11313-0x11328, 0x1132A-0x11330, 0x11332-0x11333, 0x11335-0x11339, 0x1133C-0x11344, 0x11347-0x11348, 0x1134B-0x1134D, 0x11350, 0x11357, 0x1135D-0x11363, 0x11366-0x1136C, 0x11370-0x11374, 0x11480-0x114C7, 0x114D0-0x114D9, 0x11580-0x115B5, 0x115B8-0x115DD, 0x11600-0x11644, 0x11650-0x11659, 0x11680-0x116B7, 0x116C0-0x116C9, 0x11700-0x11719, 0x1171D-0x1172B, 0x11730-0x1173F, 0x118A0-0x118F2, 0x118FF, 0x11AC0-0x11AF8, 0x12000-0x12399, 0x12400-0x1246E, 0x12470-0x12474, 0x12480-0x12543, 0x13000-0x1342E, 0x14400-0x14646, 0x16800-0x16A38, 0x16A40-0x16A5E, 0x16A60-0x16A69, 0x16A6E-0x16A6F, 0x16AD0-0x16AED, 0x16AF0-0x16AF5, 0x16B00-0x16B45, 0x16B50-0x16B59, 0x16B5B-0x16B61, 0x16B63-0x16B77, 0x16B7D-0x16B8F, 0x16F00-0x16F44, 0x16F50-0x16F7E, 0x16F8F-0x16F9F, 0x1B000-0x1B001, 0x1BC00-0x1BC6A, 0x1BC70-0x1BC7C, 0x1BC80-0x1BC88, 0x1BC90-0x1BC99, 0x1BC9C-0x1BCA3, 0x1D000-0x1D0F5, 0x1D100-0x1D126, 0x1D129-0x1D1E8, 0x1D200-0x1D245, 0x1D300-0x1D356, 0x1D360-0x1D371, 0x1D400-0x1D454, 0x1D456-0x1D49C, 0x1D49E-0x1D49F, 0x1D4A2, 0x1D4A5-0x1D4A6, 0x1D4A9-0x1D4AC, 0x1D4AE-0x1D4B9, 0x1D4BB, 0x1D4BD-0x1D4C3, 0x1D4C5-0x1D505, 0x1D507-0x1D50A, 0x1D50D-0x1D514, 0x1D516-0x1D51C, 0x1D51E-0x1D539, 0x1D53B-0x1D53E, 0x1D540-0x1D544, 0x1D546, 0x1D54A-0x1D550, 0x1D552-0x1D6A5, 0x1D6A8-0x1D7CB, 0x1D7CE-0x1DA8B, 0x1DA9B-0x1DA9F, 0x1DAA1-0x1DAAF, 0x1E800-0x1E8C4, 0x1E8C7-0x1E8D6, 0x1EE00-0x1EE03, 0x1EE05-0x1EE1F, 0x1EE21-0x1EE22, 0x1EE24, 0x1EE27, 0x1EE29-0x1EE32, 0x1EE34-0x1EE37, 0x1EE39, 0x1EE3B, 0x1EE42, 0x1EE47, 0x1EE49, 0x1EE4B, 0x1EE4D-0x1EE4F, 0x1EE51-0x1EE52, 0x1EE54, 0x1EE57, 0x1EE59, 0x1EE5B, 0x1EE5D, 0x1EE5F, 0x1EE61-0x1EE62, 0x1EE64, 0x1EE67-0x1EE6A, 0x1EE6C-0x1EE72, 0x1EE74-0x1EE77, 0x1EE79-0x1EE7C, 0x1EE7E, 0x1EE80-0x1EE89, 0x1EE8B-0x1EE9B, 0x1EEA1-0x1EEA3, 0x1EEA5-0x1EEA9, 0x1EEAB-0x1EEBB, 0x1EEF0-0x1EEF1, 0x1F000-0x1F02B, 0x1F030-0x1F093, 0x1F0A0-0x1F0AE, 0x1F0B1-0x1F0BF, 0x1F0C1-0x1F0CF, 0x1F0D1-0x1F0F5, 0x1F100-0x1F10C, 0x1F110-0x1F12E, 0x1F130-0x1F16B, 0x1F170-0x1F19A, 0x1F1E6-0x1F202, 0x1F210-0x1F23A, 0x1F240-0x1F248, 0x1F250-0x1F251, 0x1F300-0x1F579, 0x1F57B-0x1F5A3, 0x1F5A5-0x1F6D0, 0x1F6E0-0x1F6EC, 0x1F6F0-0x1F6F3, 0x1F700-0x1F773, 0x1F780-0x1F7D4, 0x1F800-0x1F80B, 0x1F810-0x1F847, 0x1F850-0x1F859, 0x1F860-0x1F887, 0x1F890-0x1F8AD, 0x1F910-0x1F918, 0x1F980-0x1F984, 0x1F9C0, 0x20000-0x2A6D6, 0x2A700-0x2B734, 0x2B740-0x2B81D, 0x2B820-0x2CEA1, 0x2F800-0x2FA1D, 0xE0001, 0xE0020-0xE007F, 0xE0100-0xE01EF')),
   59: (1, f('0x2E80-0x2E99, 0x2E9B-0x2EF3, 0x2F00-0x2FD5, 0x2FF0-0x2FFB, 0x3190-0x319F, 0x3400-0x4DB5, 0x4E00-0x9FD5, 0x20000-0x2A6D6')),
   60: (0, f('0xE000-0xF8FF')),
   61: (None, f('0xF900-0xFA6D, 0xFA70-0xFAD9, 0x2F800-0x2FA1D')),
   62: (None, f('0xFB00-0xFB06, 0xFB13-0xFB17, 0xFB1D-0xFB36, 0xFB38-0xFB3C, 0xFB3E, 0xFB40-0xFB41, 0xFB43-0xFB44, 0xFB46-0xFB4F')),
   63: (None, f('0xFB50-0xFBC1, 0xFBD3-0xFD3F, 0xFD50-0xFD8F, 0xFD92-0xFDC7, 0xFDF0-0xFDFD')),
   64: (None, f('0xFE20-0xFE2F')),
   65: (None, f('0xFE30-0xFE4F')),
   66: (None, f('0xFE50-0xFE52, 0xFE54-0xFE66, 0xFE68-0xFE6B')),
   67: (None, f('0xFE70-0xFE74, 0xFE76-0xFEFC, 0xFEFF')),
   68: (None, f('0xFF01-0xFFBE, 0xFFC2-0xFFC7, 0xFFCA-0xFFCF, 0xFFD2-0xFFD7, 0xFFDA-0xFFDC, 0xFFE0-0xFFE6, 0xFFE8-0xFFEE')),
   69: (None, f('0xFFF9-0xFFFD')),
   70: (None, f('0xF00-0xF47, 0xF49-0xF6C, 0xF71-0xF97, 0xF99-0xFBC, 0xFBE-0xFCC, 0xFCE-0xFDA')),
   71: (None, f('0x700-0x70D, 0x70F-0x74A, 0x74D-0x74F')),
   72: (None, f('0x780-0x7B1')),
   73: (None, f('0xD82-0xD83, 0xD85-0xD96, 0xD9A-0xDB1, 0xDB3-0xDBB, 0xDBD, 0xDC0-0xDC6, 0xDCA, 0xDCF-0xDD4, 0xDD6, 0xDD8-0xDDF, 0xDE6-0xDEF, 0xDF2-0xDF4')),
   74: (None, f('0x1000-0x109F')),
   75: (None, f('0x1200-0x1248, 0x124A-0x124D, 0x1250-0x1256, 0x1258, 0x125A-0x125D, 0x1260-0x1288, 0x128A-0x128D, 0x1290-0x12B0, 0x12B2-0x12B5, 0x12B8-0x12BE, 0x12C0, 0x12C2-0x12C5, 0x12C8-0x12D6, 0x12D8-0x1310, 0x1312-0x1315, 0x1318-0x135A, 0x135D-0x137C')),
   76: (None, f('0x13A0-0x13F5, 0x13F8-0x13FD')),
   77: (None, f('0x1400-0x167F')),
   78: (None, f('0x1680-0x169C')),
   79: (None, f('0x16A0-0x16F8')),
   80: (None, f('0x1780-0x17DD, 0x17E0-0x17E9, 0x17F0-0x17F9')),
   81: (None, f('0x1800-0x180E, 0x1810-0x1819, 0x1820-0x1877, 0x1880-0x18AA')),
   82: (None, f('0x2800-0x28FF')),
   83: (None, f('0xA000-0xA48C, 0xA490-0xA4C6')),
   84: (None, f('0x1700-0x170C, 0x170E-0x1714, 0x1720-0x1736, 0x1740-0x1753, 0x1760-0x176C, 0x176E-0x1770, 0x1772-0x1773')),
   85: (None, f('0x10300-0x10323')),
   86: (None, f('0x10330-0x1034A')),
   87: (None, f('0x10400-0x1044F')),
   88: (None, f('0x1D000-0x1D0F5, 0x1D100-0x1D126, 0x1D129-0x1D1E8')),
   89: (None, f('0x1D400-0x1D454, 0x1D456-0x1D49C, 0x1D49E-0x1D49F, 0x1D4A2, 0x1D4A5-0x1D4A6, 0x1D4A9-0x1D4AC, 0x1D4AE-0x1D4B9, 0x1D4BB, 0x1D4BD-0x1D4C3, 0x1D4C5-0x1D505, 0x1D507-0x1D50A, 0x1D50D-0x1D514, 0x1D516-0x1D51C, 0x1D51E-0x1D539, 0x1D53B-0x1D53E, 0x1D540-0x1D544, 0x1D546, 0x1D54A-0x1D550, 0x1D552-0x1D6A5, 0x1D6A8-0x1D7CB, 0x1D7CE-0x1D7FF')),
   90: (0, f('0xFF000-0xFFFFD, 0x100000-0x10FFFD')),
   91: (None, f('0xFE00-0xFE0F')),
   92: (None, f('0xE0001, 0xE0020-0xE007F')),
    }

del f

# -----------------------------------------------------------------------------

#
# Private functions
#

def _recalc(key, oldValue, **kwArgs):
    override, r = _rangeData[key]
    threshold = kwArgs.pop('threshold', (10 if override is None else override))
    
    if 'unicodeSpan' in kwArgs:
        uSpan = kwArgs['unicodeSpan']
    
    else:
        editor = kwArgs['editor']
        
        if editor is None:
            raise NoEditor()
        
        if not editor.reallyHas(b'cmap'):
            raise NoCmap()
        
        uMap = editor.cmap.getUnicodeMap()
        
        if not len(uMap):
            uMap = editor.cmap.getSymbolMap()
        
        uSpan = span.Span(uMap)
    
    if key == 57:
        if len(uSpan):
            newValue = uSpan[-1][1] > 0xFFFF
        else:
            newValue = False
    
    else:
        this = r.copy()
        this.intersectSpan(uSpan)
        rCount = r.count()
        thisCount = this.count()
        
        if threshold == 0:
            newValue = bool(thisCount)
        
        elif threshold == 100:
            newValue = thisCount == rCount
        
        else:
            presentRatio = float(thisCount) / float(rCount)
            newValue = presentRatio >= (threshold / 100.0)
    
    return newValue != oldValue, newValue

def _validate(obj, **kwArgs):
    d = obj.__dict__
    logger = kwArgs['logger']
    editor = kwArgs['editor']
    
    if (editor is None) or (not editor.reallyHas(b'cmap')):
        logger.error((
          'V0553',
          (),
          "Unable to validate Unicode ranges, because the Editor and/or "
          "Cmap are missing or empty."))
        
        return False
    
    uMap = editor.cmap.getUnicodeMap()
    
    if not len(uMap):
        uMap = editor.cmap.getSymbolMap()
    
    uSpan = span.Span(uMap)
    kwArgs['threshold'] = 0
    obj2 = obj.recalculated(unicodeSpan=uSpan, **kwArgs)
    d2 = obj2.__dict__
    r = True
    
    for rangeID, key in obj.rangeIDToName.items():
        if d[key] and (not d2[key]):
            if rangeID == 57:
                logger.error((
                  'E2123',
                  (),
                  "Surrogates indicated but none present in the font"))
            
            else:
                logger.error((
                  'E2113',
                  (key,),
                  "Unicode range %r claimed to be present but is not."))
            
            r = False
        
        elif d2[key] and (not d[key]):
            logger.warning((
              'V0795',
              (key,),
              "Unicode range %r claimed not to be present, but at least "
              "one glyph from the range is in the font."))
    
    if (
      utilities.safeMax(t[1] for t in uSpan) > 0xFFFF and
      (not d['hasNonPlaneZero'])):
        
        logger.error((
          'E2122',
          (),
          "Font has non-BMP characters but surrogates bit not set."))
        
        r = False
    
    return r

# -----------------------------------------------------------------------------

#
# Classes
#

if 0:
    def __________________(): pass

class UnicodeRanges(object, metaclass=maskmeta.FontDataMetaclass):
    """
    """
    
    #
    # Class definition variables
    #
    
    maskByteLength = 16  # I do love Python! 128-bit integers are no problem.

    def msLongwordSwap128(n, **kwArgs):
        # Converts from this:
        # 31 ... 0 63 ... 32 64 ... 95 96 ... 127
        # to this:
        # 127 ... 0
        i1to4 = (n &  0xFFFFFFFF) << 96
        i2to3 = (n & (0xFFFFFFFF << 32)) << 32
        i3to2 = (n & (0xFFFFFFFF << 64)) >> 32
        i4to1 = (n & (0xFFFFFFFF << 96)) >> 96
        
        return i1to4 + i2to3 + i3to2 + i4to1

    maskControls = dict(
        loggername = "unicoderanges",
        validatecode_notsettozero = "E2117",
        validatefunc_partial = _validate,
        inputconvolutionfunc = msLongwordSwap128,
        outputconvolutionfunc = msLongwordSwap128)
    
    maskSorted = (
      'hasBasicLatin', 'hasLatin1Supplement', 'hasLatinExtendedA',
      'hasLatinExtendedB', 'hasIPAPhonetics', 'hasModifierLetters',
      'hasCombiningDiacriticalMarks', 'hasGreekAndCoptic', 'hasCyrillic',
      'hasArmenian', 'hasHebrew', 'hasArabic', 'hasDevanagari', 'hasBengali',
      'hasGurmukhi', 'hasGujarati', 'hasOriya', 'hasTamil', 'hasTelugu',
      'hasKannada', 'hasMalayalam', 'hasThai', 'hasLao', 'hasGeorgian',
      'hasHangulJamo', 'hasLatinExtendedAdditional', 'hasGreekExtended',
      'hasPunctuation', 'hasSuperscriptsAndSubscripts', 'hasCurrency',
      'hasSymbolCombiningDiacritics', 'hasLetterlike', 'hasNumberForms',
      'hasArrows', 'hasMathematical', 'hasMiscellaneousTechnical',
      'hasControlPictures', 'hasOCR', 'hasEnclosed', 'hasBoxDrawing',
      'hasBlockElements', 'hasGeometricShapes', 'hasMiscellaneousSymbols',
      'hasDingbats', 'hasCJKPunctuation', 'hasHiragana', 'hasKatakana',
      'hasBopomofo', 'hasHangulCompatibilityJamo', 'hasCJKEnclosed',
      'hasCJKCompatibility', 'hasHangulSyllables', 'hasNonPlaneZero',
      'hasCJKIdeographs', 'hasPlaneZeroPrivate', 'hasCJKStrokes',
      'hasAlphabeticPresentationForms', 'hasArabicPresentationFormsA',
      'hasCombiningHalfMarks', 'hasVerticalForms', 'hasSmallFormVariants',
      'hasArabicPresentationFormsB', 'hasHalfAndFullWidthForms', 'hasSpecials',
      'hasTibetan', 'hasSyriac', 'hasThaana', 'hasSinhala', 'hasMyanmar',
      'hasEthiopic', 'hasCherokee', 'hasUnifiedCanadianAboriginalSyllabics',
      'hasOgham', 'hasRunic', 'hasKhmer', 'hasMongolian', 'hasBraille',
      'hasYi', 'hasTagalogEtAl', 'hasOldItalic', 'hasGothic', 'hasDeseret',
      'hasMusical', 'hasMathematicalAlphanumerics', 'hasPlane1516Private',
      'hasVariations', 'hasTags')
    
    rangeIDToName = dict(zip(sorted(_rangeData), maskSorted))
    maskSpec = {}
    
    def makeClosure(rangeID):
        def f(old, **kwArgs):
            return _recalc(rangeID, old, **kwArgs)
        
        return f
    
    for rangeID, key in rangeIDToName.items():
        maskSpec[key] = dict(
          mask_isbool = True,
          mask_recalculatefunc = makeClosure(rangeID),
          mask_rightmostbitindex = rangeID,
          mask_showonlyiftrue = True)
    
    del key, rangeID, makeClosure
    
    #
    # Class methods
    #
    
    @classmethod
    def fromversion2(cls, v2Obj, **kwArgs):
        """
        Returns a new version 3 UnicodeRanges object from the specified
        version 2 UnicodeRanges object. There is one keyword argument:
        
            deferRecalculation  If True (the default), the fields will be
                                copied but no recalculation is done. The client
                                should do a recalculation, in this case. If
                                False, a recalculated() object will be
                                returned; in this case, the client should be
                                sure to pass in the needed keyword arguments
                                (usually editor and unicodeSpan, and perhaps
                                base1252 and threshold as well).
        """
        
        r = cls(
          hasBasicLatin = v2Obj.hasBasicLatin,
          hasLatin1Supplement = v2Obj.hasLatin1Supplement,
          hasLatinExtendedA = v2Obj.hasLatinExtendedA,
          hasLatinExtendedB = v2Obj.hasLatinExtendedB,
          hasIPAPhonetics = v2Obj.hasIPA,
          hasModifierLetters = v2Obj.hasModifierLetters,
          hasCombiningDiacriticalMarks = v2Obj.hasCombiningDiacriticalMarks,
          hasGreekAndCoptic = v2Obj.hasGreek,
          hasCyrillic = v2Obj.hasCyrillic,
          hasArmenian = v2Obj.hasArmenian,
          hasHebrew = v2Obj.hasHebrew,
          hasArabic = v2Obj.hasArabic,
          hasDevanagari = v2Obj.hasDevanagari,
          hasBengali = v2Obj.hasBengali,
          hasGurmukhi = v2Obj.hasGurmukhi,
          hasGujarati = v2Obj.hasGujarati,
          hasOriya = v2Obj.hasOriya,
          hasTamil = v2Obj.hasTamil,
          hasTelugu = v2Obj.hasTelugu,
          hasKannada = v2Obj.hasKannada,
          hasMalayalam = v2Obj.hasMalayalam,
          hasThai = v2Obj.hasThai,
          hasLao = v2Obj.hasLao,
          hasGeorgian = v2Obj.hasGeorgian,
          hasHangulJamo = v2Obj.hasHangulJamo,
          hasLatinExtendedAdditional = v2Obj.hasLatinExtendedAdditional,
          hasGreekExtended = v2Obj.hasGreekExtended,
          hasPunctuation = v2Obj.hasPunctuation,
          hasSuperscriptsAndSubscripts = v2Obj.hasSuperscriptsAndSubscripts,
          hasCurrency = v2Obj.hasCurrency,
          hasSymbolCombiningDiacritics = v2Obj.hasSymbolCombiningDiacritics,
          hasLetterlike = v2Obj.hasLetterlike,
          hasNumberForms = v2Obj.hasNumberForms,
          hasArrows = v2Obj.hasArrows,
          hasMathematical = v2Obj.hasMathematical,
          hasMiscellaneousTechnical = v2Obj.hasMiscellaneousTechnical,
          hasControlPictures = v2Obj.hasControlPictures,
          hasOCR = v2Obj.hasOCR,
          hasEnclosed = v2Obj.hasEnclosed,
          hasBoxDrawing = v2Obj.hasBoxDrawing,
          hasBlockElements = v2Obj.hasBlockElements,
          hasGeometricShapes = v2Obj.hasGeometricShapes,
          hasMiscellaneousSymbols = v2Obj.hasMiscellaneousSymbols,
          hasDingbats = v2Obj.hasDingbats,
          hasCJKPunctuation = v2Obj.hasCJKPunctuation,
          hasHiragana = v2Obj.hasHiragana,
          hasKatakana = v2Obj.hasKatakana,
          hasBopomofo = v2Obj.hasBopomofo,
          hasHangulCompatibilityJamo = v2Obj.hasHangulCompatibilityJamo,
          hasCJKEnclosed = v2Obj.hasCJKEnclosed,
          hasCJKCompatibility = v2Obj.hasCJKCompatibility,
          hasHangulSyllables = v2Obj.hasHangulSyllables,
          hasNonPlaneZero = v2Obj.hasNonPlaneZero,
          hasCJKIdeographs = v2Obj.hasCJKIdeographs,
          hasPlaneZeroPrivate = v2Obj.hasPlaneZeroPrivate,
          hasCJKStrokes = v2Obj.hasCJKStrokes,
          hasAlphabeticPresentationForms = v2Obj.hasAlphabeticPresentationForms,
          hasArabicPresentationFormsA = v2Obj.hasArabicPresentationFormsA,
          hasCombiningHalfMarks = v2Obj.hasCombiningHalfMarks,
          hasVerticalForms = v2Obj.hasVerticalForms,
          hasSmallFormVariants = v2Obj.hasSmallFormVariants,
          hasArabicPresentationFormsB = v2Obj.hasArabicPresentationFormsB,
          hasHalfAndFullWidthForms = v2Obj.hasHalfAndFullWidthForms,
          hasSpecials = v2Obj.hasSpecials,
          hasTibetan = v2Obj.hasTibetan,
          hasSyriac = v2Obj.hasSyriac,
          hasThaana = v2Obj.hasThaana,
          hasSinhala = v2Obj.hasSinhala,
          hasMyanmar = v2Obj.hasMyanmar,
          hasEthiopic = v2Obj.hasEthiopic,
          hasCherokee = v2Obj.hasCherokee,
          hasUnifiedCanadianAboriginalSyllabics = v2Obj.hasUnifiedCanadianAboriginalSyllabics,
          hasOgham = v2Obj.hasOgham,
          hasRunic = v2Obj.hasRunic,
          hasKhmer = v2Obj.hasKhmer,
          hasMongolian = v2Obj.hasMongolian,
          hasBraille = v2Obj.hasBraille,
          hasYi = v2Obj.hasYi)
        
        if kwArgs.get('deferRecalculation', True):
            return r
        
        return r.recalculated(**kwArgs)
    
    #
    # Public methods
    #
    
    def asVersion2(self, **kwArgs):
        """
        Returns a version 2 UnicodeRanges object from the data in self. There
        is one keyword argument:
        
            deferRecalculation  If True (the default), the fields will be
                                copied but no recalculation is done. The client
                                should do a recalculation, in this case. If
                                False, a recalculated() object will be
                                returned; in this case, the client should be
                                sure to pass in the needed keyword arguments
                                (usually editor and unicodeSpan, and perhaps
                                base1252 and threshold as well).
        """
        
        r = unicoderanges_v2.UnicodeRanges(
          hasBasicLatin = self.hasBasicLatin,
          hasLatin1Supplement = self.hasLatin1Supplement,
          hasLatinExtendedA = self.hasLatinExtendedA,
          hasLatinExtendedB = self.hasLatinExtendedB,
          hasIPA = self.hasIPAPhonetics,
          hasModifierLetters = self.hasModifierLetters,
          hasCombiningDiacriticalMarks = self.hasCombiningDiacriticalMarks,
          hasGreek = self.hasGreekAndCoptic,
          hasCyrillic = self.hasCyrillic,
          hasArmenian = self.hasArmenian,
          hasHebrew = self.hasHebrew,
          hasArabic = self.hasArabic,
          hasDevanagari = self.hasDevanagari,
          hasBengali = self.hasBengali,
          hasGurmukhi = self.hasGurmukhi,
          hasGujarati = self.hasGujarati,
          hasOriya = self.hasOriya,
          hasTamil = self.hasTamil,
          hasTelugu = self.hasTelugu,
          hasKannada = self.hasKannada,
          hasMalayalam = self.hasMalayalam,
          hasThai = self.hasThai,
          hasLao = self.hasLao,
          hasGeorgian = self.hasGeorgian,
          hasHangulJamo = self.hasHangulJamo,
          hasLatinExtendedAdditional = self.hasLatinExtendedAdditional,
          hasGreekExtended = self.hasGreekExtended,
          hasPunctuation = self.hasPunctuation,
          hasSuperscriptsAndSubscripts = self.hasSuperscriptsAndSubscripts,
          hasCurrency = self.hasCurrency,
          hasSymbolCombiningDiacritics = self.hasSymbolCombiningDiacritics,
          hasLetterlike = self.hasLetterlike,
          hasNumberForms = self.hasNumberForms,
          hasArrows = self.hasArrows,
          hasMathematical = self.hasMathematical,
          hasMiscellaneousTechnical = self.hasMiscellaneousTechnical,
          hasControlPictures = self.hasControlPictures,
          hasOCR = self.hasOCR,
          hasEnclosed = self.hasEnclosed,
          hasBoxDrawing = self.hasBoxDrawing,
          hasBlockElements = self.hasBlockElements,
          hasGeometricShapes = self.hasGeometricShapes,
          hasMiscellaneousSymbols = self.hasMiscellaneousSymbols,
          hasDingbats = self.hasDingbats,
          hasCJKPunctuation = self.hasCJKPunctuation,
          hasHiragana = self.hasHiragana,
          hasKatakana = self.hasKatakana,
          hasBopomofo = self.hasBopomofo,
          hasHangulCompatibilityJamo = self.hasHangulCompatibilityJamo,
          # no equivalent for hasCJKMiscellaneous
          hasCJKEnclosed = self.hasCJKEnclosed,
          hasCJKCompatibility = self.hasCJKCompatibility,
          hasHangulSyllables = self.hasHangulSyllables,
          hasNonPlaneZero = self.hasNonPlaneZero,
          hasCJKIdeographs = self.hasCJKIdeographs,
          hasPlaneZeroPrivate = self.hasPlaneZeroPrivate,
          hasCJKStrokes = self.hasCJKStrokes,
          hasAlphabeticPresentationForms = self.hasAlphabeticPresentationForms,
          hasArabicPresentationFormsA = self.hasArabicPresentationFormsA,
          hasCombiningHalfMarks = self.hasCombiningHalfMarks,
          hasVerticalForms = self.hasVerticalForms,
          hasSmallFormVariants = self.hasSmallFormVariants,
          hasArabicPresentationFormsB = self.hasArabicPresentationFormsB,
          hasHalfAndFullWidthForms = self.hasHalfAndFullWidthForms,
          hasSpecials = self.hasSpecials,
          hasTibetan = self.hasTibetan,
          hasSyriac = self.hasSyriac,
          hasThaana = self.hasThaana,
          hasSinhala = self.hasSinhala,
          hasMyanmar = self.hasMyanmar,
          hasEthiopic = self.hasEthiopic,
          hasCherokee = self.hasCherokee,
          hasUnifiedCanadianAboriginalSyllabics = self.hasUnifiedCanadianAboriginalSyllabics,
          hasOgham = self.hasOgham,
          hasRunic = self.hasRunic,
          hasKhmer = self.hasKhmer,
          hasMongolian = self.hasMongolian,
          hasBraille = self.hasBraille,
          hasYi = self.hasYi)
        
        if kwArgs.get('deferRecalculation', True):
            return r
        
        return r.recalculated(**kwArgs)

# -----------------------------------------------------------------------------

#
# Test code
#

if 0:
    def __________________(): pass

def _test():
    import doctest
    doctest.testmod()

if __name__ == "__main__":
    if __debug__:
        _test()
